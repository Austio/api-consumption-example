== README

* Ruby version

2.1.2

* Configuration

This is a standard rails app using rails 4.  To start run rake db:setup and then create an account

* General Setup

There are several models
  User - ActiveRecord model, a user managed with devise
  Course - A stuct used to hold the information that is received from the CanvasAPI
  Enrollment - ActiveRecord model, join table between user and course that hold the course name on creation to reduce API calls


* Services (job queues, cache servers, search engines, etc.)

CanvasAPI is a module located in app/services.  It is responsible for connecting to and parsing the canvas API.  It is composed of several classes

  Connection - establishes the connection with the canvas-api, site is optional and defaults to the heroku app
    CanvasAPI::Connection.establish(site)

  Request - used for requesting API tokens
    CanvasAPI::Request.auth_token

  Parsed - used for parsing the json that is returned by a web request
    CanvasAPI::Parsed.request(response)

    returns a json object
    {
      "status"  : the status code (i.e. 201, 200, 400, etc)
      "body"    : JSON object of the response body
      "headers" : JSON object of the response headers
    }


CourseEnroller is a PORO used to determine if a user is enrolled in a course and also to enroll them in a course

CourseFactory is a factory that generates a course from an API call to Canvas using the above service object

CoursePaginator is a PORO that takes care of the logic of paginating results for a user
  In this, i reduce API calls by not checking if the next page will have results but failing gracefully by displaying nothing.  This would be a product discusssion but it will really reduce API Calls.